# -*- coding: utf-8 -*-
"""XML Conversion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K8tqAtsJ20cNGgxYTfBzX_60JFddsgl_
"""

import xml.etree.ElementTree as ET
import json as js

json = {"left":[], "right":[]}

tree = ET.parse('input.xml')

root = tree.getroot()

for child in root[0][1]:
  if child.tag=="RegionAttributeHeaders":
    continue
  appendage = {"type": "Annotation", "body": [], "target": {"source": "https://datacommons.swmed.edu/scopeviewer/undefined", "selector": {}}, "@context": "http://www.w3.org/ns/anno.jsonld", "id": "#00000000-0000-0000-0000-000000000000"}
  type = int(child.attrib['Type'])
  vertices = child[1]
  if type==1:
    bl = vertices[0].attrib
    tr = vertices[2].attrib
    a=bl['X']
    b=bl['Y']
    c=float(tr['X'])-float(bl['X'])
    d=float(tr['Y'])-float(bl['Y'])
    value = "xywh=pixel:{a},{b},{c},{d}".format(a=a, b=b, c=c, d=d)
    appendage['target']['selector']['type'] = "FragmentSelector"
    appendage['target']['selector']['conformsTo'] = "http://www.w3.org/TR/media-frags/"
    appendage['target']['selector']['value'] = value
  else:
    appendage['target']['selector']['type'] = "SvgSelector"
    if type==0:
      vertex_string = ""
      for index, i in enumerate(vertices):
        letter = 'L'
        if index==0:
          letter = 'M'
        vertex_string = vertex_string + (letter + i.attrib['X'] + ' ' + i.attrib['Y'] + ' ')
      vertex_string = "<svg><path d=\"" + vertex_string[:-1] + "\"></path></svg>"
      appendage['target']['selector']['value'] = vertex_string
    elif type==2:
      vertex_string = ""
      bl = [float(vertices[0].attrib['X']), float(vertices[0].attrib['Y'])]
      tr = [float(vertices[1].attrib['X']), float(vertices[1].attrib['Y'])]
      cx = (tr[0]+bl[0])/2
      cy = (tr[1]+bl[1])/2
      rx = (tr[0]-bl[0])/2
      ry = (tr[1]-bl[1])/2
      vertex_string = vertex_string + " cx=\"" + str(cx) + "\""
      vertex_string = vertex_string + " cy=\"" + str(cy) + "\""
      vertex_string = vertex_string + " rx=\"" + str(rx) + "\""
      vertex_string = vertex_string + " ry=\"" + str(ry) + "\""
      vertex_string = "<svg><ellipse{a}></circle></svg>".format(a=vertex_string)
      appendage['target']['selector']['value'] = vertex_string
  json["left"].append(appendage)

with open("output.json", "w") as outfile:
    js.dump(json, outfile)





